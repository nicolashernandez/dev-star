# UIMA Text Segmenter
# Copyright (C) 2011  Nicolas Hernandez
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.  
#
# Fichier README
# 2011-02-28  Nicolas Hernandez  <nicolas.hernandez@gmail.com>



INSTALL INSTRUCTIONS
	MANDATORY REQUIREMENTS
	
		Libraries dependency	 
		* Add the traditional UIMA libs (uima-core.jar uima-tools.jar 
		uima-cpe.jar uima-document-annotation.jar) in your BUID/CLASSPATH
		* Add also the uima-common library in your BUID/CLASSPATH. It is 
		available at https://code.google.com/p/uima-common/ 
		* Add also the current project library in your BUID/CLASSPATH (working
		in it with a Eclipse import do the same)  
				
		* Note that if you checkout the project source, the current eclipse .classpath 
		declares the UIMA jar files via a UIMA_HOME variable and the uima-common file
		via a project dependency for the uima-common project (also assumed checkout 
		in your workspace). The best is to remove these declarations and to start with 
		some news ad hoc to your own workspace.
		
	OPTIONAL REQUIREMENTS (essentially for running the example)
		Libraries dependency
		* To run the examples, you will need some Apache UIMA addons libraries 
		available in the classpath, namely wst,	snowball, tagger.
		Here their path are defined relatively to the UIMA_HOME variable.
		It assumes that the  UIMA_HOME contains the addons directory.
		The binary of the addons are available here 
		http://uima.apache.org/downloads.cgi (See Latest Official Releases)
		Add UIMA_HOME/addons/annotator/SnowballAnnotator/lib/uima-an-snowball.jar
  		Add UIMA_HOME/addons/annotator/WhitespaceTokenizer/lib/uima-an-wst.jar

		Resources files 
		* Add in your resource directory (which should be added in your BUID/CLASSPATH) 
		the stopword files you want to use. For example, the current version comes with
		a French and an English stop words lists extracted from  http://snowball.tartarus.org
		wget http://snowball.tartarus.org/algorithms/french/stop.txt -O stop.txt && cat stop.txt|iconv -f iso-8859-1 -t utf8 | perl -ne 'chomp;/^([^ ]+)/; print "$1\n";' | sort | uniq | grep -v '|' | grep -v '^$' > stopWords-fr.csv	
		wget http://snowball.tartarus.org/algorithms/english/stop.txt -O stop.txt && cat stop.txt|iconv -f iso-8859-1 -t utf8 | perl -ne 'chomp;/^([^ ]+)/; print "$1\n";' | sort | uniq | grep -v '|' | grep -v '^$' > stopWords-en.csv	


RUN INSTRUCTIONS

	Before trying to define your own descriptor (and setting so your parameter configuration), 
	run the descriptor example and check the parameters values of the descriptors examples.
	It means `desc/textSegmenter/wst-snowball-C99-JTextTilingAAE.xml`, 
	`desc/textSegmenter/C99AE.xml` and  `desc/textSegmenter/JTextileAE.xml`

	Here we present one way to do it, in particular we propose to run the 
	segmenter in an Eclipse project having the UIMA Nature by extending 
	the current C99AE and JTextTileAE descriptors.
	Since these descriptors defines some parameter values, this imply that
	if you do not override them, you will have to check that your system is 
	able to ensure to work with them.
	This concerns mainly the path to the stopword file, the sentence annotation type, 
	the token annotation type and its feature name (e.g. coveredText, stem...) 
	to consider for segmenting.   

	* Create an aggregate descriptor
	* Add (by name) in the Aggregate tab either the `desc/textSegmenter/C99AE` 
	descriptor or the `desc/textSegmenter/JTextTileAE` descriptor depending 
	on what segmenter you want to use: C99 or JTextTile.
  	* Do not forget to add the output types in the Capabilities tab.
  	
  	Since you are extending an AE (which already defines some values), you have to 
  	* Add in the resource directory of your project, the stopword list you want to use 
  	and then you have to override the `StopWordFile` component parameter in the
  	 Parameter tabs of your descriptor file.   
  	* Both C99AE and JTextTileAE assume to find some sentence and token annotations.
  	By default they can work with 
  	`org.apache.uima.SentenceAnnotation` and `org.apache.uima.TokenAnnotation` type. 
  	So override the component parameter on purpose if your pipeline produces some 
  	other annotation types.
  	* The C99AE and JTextTileAE descriptors may define the `InputWordFeature` with `stem` as value.
  	If your type system does not define this feature for your Token annotation 
  	and if your pipeline does not produce a value for it then override the component parameter with
  	`coveredText` as value. This should work if you defined your annotation by extending the
  	`uima.tcas.Annotation` type.  
  	* More generally to define your parameters values, override the component parameters 
  	in your aggregate (see the Parameter tabs of your descriptor file). Consult the 
  	`parameters` section below to help you to define correct values. 
  	
  	If you do not want to use a stopword list then you have to specify an empty file anyway.

	
EXAMPLES

	With the DocumentAnalyzer, run the following descriptor
	`desc/textSegmenter/wst-snowball-C99-JTextTilingAAE.xml` by taking the 
	uima-examples data as input.
	This descriptor is an aggregate which runs in pipeline the Apache WhitespaceTokenizer, the  
	Apache SnowballAnnotator to provide first somes sentences, words and word stems. 
	Then the pipeline runs both C99AE and JTextileAE.
	In practice, the analyzers have no dependency.

	To run this example, do not forget to add the following jar in your CLASS/BUIDPATH.
	  * `UIMA_HOME/addons/annotator/SnowballAnnotator/lib/uima-an-snowball.jar`
      * `UIMA_HOME/addons/annotator/WhitespaceTokenizer/lib/uima-an-wst.jar`


INSTALLATION PROBLEMS

	Si vous avez un problème d'Access Restriction sur la classe sun.misc ou une de ses méthodes, 
	Alors Properties > Java build path > Libraries > Remove JRE System Library > Add Library > JRE System Library 
	(vous pouvez essayer de recharger le même par exemple le default) ; perso cela marche avec le jdk.1.6.17

	Le code code source de `uk.ac.man.cs.choif.nlp.seg.linear.JTextTile` compile avec 
	une erreur. Cette classe étant réécrite (voir section Description) ce n'est pas 
	génant pour le développement ou l'utilisation du wrapper. Néanmoins pour 
	éviter le signal de l'erreur, on a localement édité et  solutionne en 
	initialisant à `null` la variable S dans la ligne `protected Stopword S = new Stopword();` 

	Alors que le jar distribué sur le site contient les fichiers binaires, le dépot 
	svn ne les contient pas. Il se peut que vous ayez des erreurs de compilation 
	car tous les binaires n'ont pas été régénérés à partir de vos sources. 
	Commencer d'abord par stopper l'auto build, puis à effectuer un jcasgen sur 
	desc/textSegmenter/TextSegmenterTS.xml, puis un remove/add desc as build source 
	et a la mano build project. A l'aide du navigator, vérifiez vous devez avoir 
	dans le bin les répertoires suivants : fr (avec un sous répertoire types), uk, 
	
	If you use default values for the `WindowSize` and the `StepSize Size` 
	parameters, the size of the texts you analyze should be 'great enough'.
	See the parameters information below.
	
	
PARAMETERS

	Ci-dessous les paramètres communs et spécifiques que C99 et JTextile utilisent. 

	*Input|Output parameters* (Common to `desc/textSegmenter/C99AE` and `desc/textSegmenter/JTextTileAE`)
		* `InputView` CAS view to proceed. By default this view will be the 
		`_InitialView`. If you do not now, then leaving it empty will 
		probably be a good choice.
		* `InputSentenceAnnotation` Annotation type which corresponds to a 
		sentence unit. By default `org.apache.uima.SentenceAnnotation`
		* `InputWordAnnotation`	Annotation type which corresponds to a word 
		unit. By default will be `org.apache.uima.TokenAnnotation`
		* `InputWordFeature` Corresponds to the word token feature to consider. 
		Default is `coveredText` but can be set to `stem` depending on the prior AE.
		* `OutputSegmentAnnotation` Annotation to create for each text segment 
		detected. By default it is set to `fr.univnantes.lina.uima.textSegmenter.types.SegmentAnnotation`. 
		C99AE provides also a C99SegmentAnnotation while JTextTileAE provides 
		a JTextTileAnnotation.
		* `StopWordFile` path to a stop word file
		
	*Algorithm parameters specific to `desc/textSegmenter/C99AE`*
		* `NumberOfSegments` 	Number of segments to make, if -1 then let the
		algorithm decide.		
		* `RankingMaskSize`	Size of ranking mask rank to smooth the similarity 
		matrix of all the sentences (Apply hard ranking (replace pixel value 
		with the proportion of neighbouring values its greater than) to matrix 
		using a S x S mask). It is said >=1 in the main method description 
		and >=3 in the segment* method description. Surely should be >=3 to be effective. 
		* `TermFrequencyWeight`		Compute sentence similarity taking into 
		account of term frequency (actually the entropy based on the token 
		occurrence probability over all the sentences)
		
	*Algorithm parameters specific to `desc/textSegmenter/JTextTileAE`*
		* `WindowSize` Window size in number of words. Hearst suggested 30. 
		Choi claimed  the same but its default value was 100 in its implementation. 
		It depends on the number of words per sentence/proposition and also if we 
		words with raw words, post tag filtered words, stems... and from the text genre...
		Set it to -1 if you want the program to determine automatically the "best" value. 
		The computation is based on  simple homemade empirical heuristic which set the 
		best value to 3 times the average size of a sentence in terms of words.
		* `StepSize Size` of the step to shift the window. Hearst suggested 5. 
		Choi claimed the same but its default value was 10 in its implementation. 
		It depends on the number of words per sentence/proposition and also 
		if we words with raw words, post tag filtered words, stems... 
		and from the text genre...
		Set it to -1 if you want the program to determine automatically 
		the "best" value. The computation is based on  simple homemade 
		empirical heuristic which set the best value to 1 time the average size 
		of a sentence in terms of words. 
